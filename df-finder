#!/usr/bin/env python3

import hashlib
import os
import io
import re
import sys
import getopt


MAX_BUFFER_SIZE = io.DEFAULT_BUFFER_SIZE

def generate_file_check_sum (filepath):

    file = None
    try:
        file = open (filepath, 'rb')
        hash = hashlib.new ('sha1')
        while True:
            chunk = file.read (MAX_BUFFER_SIZE)
            if not chunk:
                break
            hash.update (chunk)
    except Exception as e:
        print ('ERROR!:', e)
    else:
        return hash.hexdigest ()
    finally:
        if file is not None:
            try:
                file.close ()
            except Exception:
                pass

def main (argv=sys.argv):
    """Usage: df-finder [OPTION]... [PATH]...
Dublicate file finder, find dublicated files (same content) in specific PATH.

Mandatory arguments to long options are mandatory for short options too.
  -e, --exclude=PATTERN     directories and files to be excluded from search
  -i, --include=PATTERN     directories and files to be examined
      --excludef=PATTERN    same as -e but for files ONLY
      --includef=PATTERN    same as -i but for files ONLY
      --excluded=PATTERN    same as -e but for directories ONLY
      --included=PATTERN    same as -i but for directories ONLY
  -h, --help                print this message
  -v                        be verbose
  -vv                       be more verbose
  -0                        include empty files (why anyone want to do that?)
  -P                        never  follow  symbolic  links,   this  is the
                            default behaviour.
  -L                        follow symbolic links

PATTERN is a python regular expresion pattern
    """
    try:
        long_opts = ('exclude=','include=', 'excludef=', 'includef=',
                'excluded=', 'included=', 'help')
        short_opts = 'he:i:v0LP'
        args, paths = getopt.gnu_getopt (argv[1:], short_opts, long_opts)
    except getopt.GetoptError as err:
        ## print help information and exit:
        print (err, main.__doc__, sep='\n')
        sys.exit (2)

    FOLDERS = []
    VERBOSE = 0
    Z0FILES = 0
    ## regexp patterns to exclude and include only specific files AND
    ## directories
    EXCLUDE = None
    INCLUDE = None
    ## regexp patterns to exclude and include only specific files
    EXCLUDEF = None
    INCLUDEF = None
    ## regexp patterns to exclude and include only specific dirs
    EXCLUDED = None
    INCLUDED = None
    ## flag indicating link treatment behavior, (default False)
    FOLLOWLK = False


    for o, a in args:
        ## print help message and exit
        if o in ('-h', '--help'):
            print (main.__doc__)
            sys.exit ()
        elif o == '-v':
            ## increase verbosity
            VERBOSE += 1
        elif o == '-0':
            ## include zero size files
            Z0FILES = 1
        elif o in ('-e', '--exclude'):
            ## compile exclude regexp pattern, do not search files
            ## and directories that match this pattern
            EXCLUDE = re.compile (a)
        elif o in ('-i', '--include'):
            ## include pattern, search only for files and directories
            ## that match it
            INCLUDE = re.compile (a)
        elif o == '--excludef':
            ## compile exclude regexp pattern, do not search files
            ## that match this pattern
            EXCLUDEF = re.compile (a)
        elif o == '--includef':
            ## include pattern, search only for files that match it
            INCLUDEF = re.compile (a)
        elif o == '--excluded':
            ## compile exclude regexp pattern, do not search directories
            ## that match this pattern
            EXCLUDED = re.compile (a)
        elif o == '--included':
            ## include pattern, search only directories that match it
            INCLUDED = re.compile (a)
        elif o == '-P':
            ## do no folow symbolic links
            FOLLOWLK = False
        elif o == '-L':
            ## folow symbolic links
            FOLLOWLK = True

    if paths:
        for path in paths:
            ## Check if path is a valid directory
            if not os.path.exists (path):
                errmsg = 'Path "%s" do not exist'
                print (errmsg % path, file=sys.stderr)
                continue
            elif not os.path.isdir (path):
                errmsg = 'Path "%s" is not a directory'
                print (errmsg % path, file=sys.stderr)
                continue
            ## Append path to folder list we will be checking
            FOLDERS.append (path)
        ## Check if there are any valid dirs in searching path
        if not FOLDERS:
            errmsg = 'There is not a single valid location to check'
            print (errmsg, file=sys.stderr)
            sys.exit (1)
    else:
        ## if path not given, raise error and print help messge
        print ('Missing search path\n')
        print (main.__doc__)
        sys.exit (2)

    ## Duplicate files
    dfiles = {}

    try:
        for basedir in FOLDERS:
            for (dirpath, dirnames, filenames) in os.walk (basedir,
                                                        followlinks=FOLLOWLK):
                if VERBOSE:
                    print ('checking dir:', dirpath)

                ## Omit excluded and not included directories and files,
                ## iterate over list copies to avoid problems with lists
                ## changing their size during iteration.

                ## file list to omit
                f_to_omit = []
                for file in filenames [:]:
                    if INCLUDE and not INCLUDE.match (file):
                        f_to_omit.append (file)
                    if INCLUDEF and not INCLUDEF.match (file):
                        f_to_omit.append (file)
                    if EXCLUDE and EXCLUDE.match (file):
                        f_to_omit.append (file)
                    if EXCLUDEF and EXCLUDEF.match (file):
                        f_to_omit.append (file)
                    ## if FOLLOWLK flag is set (witch means do not follow
                    ## links) remove links from files to check
                    if FOLLOWLK:
                        if os.path.islink (file):
                            filenames.remove (file)
                if f_to_omit:
                    if VERBOSE > 1:
                        print ('Omitting files:')
                    for f in f_to_omit:
                        filenames.remove (f)
                        if VERBOSE > 1:
                            print (' ', f)

                ## folder list to omit
                d_to_omit = []
                for dir in dirnames [:]:
                    if INCLUDE and not INCLUDE.match (dir):
                        d_to_omit.append (dir)
                    if INCLUDED and not INCLUDED.match (dir):
                        d_to_omit.append (dir)
                    if EXCLUDE and EXCLUDE.match (dir):
                        d_to_omit.append (dir)
                    if EXCLUDED and EXCLUDED.match (dir):
                        d_to_omit.append (dir)
                if d_to_omit:
                    if VERBOSE > 1:
                        print ('Omitting dirs:')
                    for d in d_to_omit:
                        dirnames.remove (d)
                        if VERBOSE > 1:
                            print (' ', d)

                try:
                    if VERBOSE > 1:
                        print ('Files to check:')

                    for i, file in enumerate (filenames):
                        path = os.path.join (dirpath, file)
                        if os.path.islink (path):
                            continue

                        stat = os.stat (path)
                        ## check for non empty files only,
                        ## unless Z0FILES option is set
                        if not Z0FILES and stat.st_size == 0:
                            continue

                        if VERBOSE > 1:
                            print (' ', os.path.basename (path))
                        ## generate file hash
                        hash = generate_file_check_sum (path)

                        entry = (path, stat)
                        if hash in dfiles:
                            dfiles [hash].append (entry)
                        else:
                            dfiles [hash] = [entry]
                except (OSError, IOError) as err:
                    print (err, file=sys.stderr)

    except KeyboardInterrupt:
        print ('Canceled!')
    finally:
        print ()
        for k, v in dfiles.items ():
            if len (v) > 1:
                print ('SHA1:', k)
                print ('size:', v [0][1].st_size)
                print ('-' * 79)
                for entry in v:
                    path, name = os.path.split (entry [0])
                    print ('  file name:', name)
                    print ('  file path:', path)
                    print ()
                print ('=' * 79)

if __name__ == "__main__":
    main ()
